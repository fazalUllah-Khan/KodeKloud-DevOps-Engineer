The Nautilus DevOps team want to deploy a PHP website on Kubernetes cluster. They are going to use Apache as a web server and Mysql for database. The team had already gathered the requirements and now they want to make this website live. Below you can find more details:


1) Create a config map php-config for php.ini with variables_order = "EGPCS" data.

2) Create a deployment named lamp-wp.

3) Create two containers under it. First container must be httpd-php-container using image webdevops/php-apache:alpine-3-php7 and second container must be mysql-container from image mysql:5.6. Mount php-config configmap in httpd container at /opt/docker/etc/php/php.ini location.

4) Create kubernetes generic secrets for mysql related values like myql root password, mysql user, mysql password, mysql host and mysql database. Set any values of your choice.

5) Add some environment variables for both containers:

a) MYSQL_ROOT_PASSWORD, MYSQL_DATABASE, MYSQL_USER, MYSQL_PASSWORD and MYSQL_HOST. Take their values from the secrets you created. Please make sure to use env field (do not use envFrom) to define the name-value pair of environment variables.

6) Create a node port type service lamp-service to expose the web application, nodePort must be 30008.

7) Create a service for mysql named mysql-service and its port must be 3306.

8) We already have /tmp/index.php file on jump_host server.

a) Copy this file into httpd container under Apache document root i.e /app and replace the dummy values for mysql related variables with the environment variables you have set for mysql related parameters. Please make sure you do not hard code the mysql related details in this file, you must use the environment variables to fetch those values.

b) You must be able to access this index.php on node port 30008 at the end, please note that you should see Connected successfully message while accessing this page.

Note:


The kubectl utility on jump_host has been configured to work with the kubernetes cluster.

# Solution
thor@jump_host ~$ kubectl get po
No resources found in default namespace.
thor@jump_host ~$ kubectl get po -A
NAMESPACE            NAME                                              READY   STATUS    RESTARTS   AGE
kube-system          coredns-5d78c9869d-j6fxg                          1/1     Running   0          30m
kube-system          coredns-5d78c9869d-t8k77                          1/1     Running   0          30m
kube-system          etcd-kodekloud-control-plane                      1/1     Running   0          30m
kube-system          kindnet-wrtxj                                     1/1     Running   0          30m
kube-system          kube-apiserver-kodekloud-control-plane            1/1     Running   0          30m
kube-system          kube-controller-manager-kodekloud-control-plane   1/1     Running   0          30m
kube-system          kube-proxy-4p5gs                                  1/1     Running   0          30m
kube-system          kube-scheduler-kodekloud-control-plane            1/1     Running   0          30m
local-path-storage   local-path-provisioner-6bc4bddd6b-ps95v           1/1     Running   0          30m
thor@jump_host ~$ kubectl get deploy -A
NAMESPACE            NAME                     READY   UP-TO-DATE   AVAILABLE   AGE
kube-system          coredns                  2/2     2            2           30m
local-path-storage   local-path-provisioner   1/1     1            1           30m
thor@jump_host ~$ kubectl get service -A
NAMESPACE     NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)                  AGE
default       kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP                  31m
kube-system   kube-dns     ClusterIP   10.96.0.10   <none>        53/UDP,53/TCP,9153/TCP   31m
thor@jump_host ~$ kubectl get namespace -A
NAME                 STATUS   AGE
default              Active   31m
kube-node-lease      Active   31m
kube-public          Active   31m
kube-system          Active   31m
local-path-storage   Active   31m
thor@jump_host ~$ kubectl get screates
error: the server doesn't have a resource type "screates"
thor@jump_host ~$ kubectl get secrets
No resources found in default namespace.
thor@jump_host ~$ kubectl get secrets -A
NAMESPACE     NAME                     TYPE                            DATA   AGE
kube-system   bootstrap-token-abcdef   bootstrap.kubernetes.io/token   6      33m
thor@jump_host ~$ kubectl get all
NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
service/kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   33m
thor@jump_host ~$ kubectl create secret generic database --from-literal=MYSQL_ROOT_PASSWORD=nbtech --from-literal=MYSQL_DATABASE=kodekloud --from-literal=MYSQL_USER=nbtechsupport --from-literal=MYSQL_PASSWORD=nbtech --from-literal=MYSQL_HOST=mysql-service
secret/database created
thor@jump_host ~$ 
thor@jump_host ~$ kubectl get secretsNAME       TYPE     DATA   AGEdatabase   Opaque   5      52s
thor@jump_host ~$ vi /tmp/lamp.yaml
thor@jump_host ~$ cat /tmp/lamp.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: php-config
data:
  php.ini: |
     variables_order = "EGPCS"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: lamp-wp
  name: lamp-wp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: lamp-wp
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: lamp-wp
    spec:
      containers:
      - image: webdevops/php-apache:alpine-3-php7
        name: httpd-php-container
        resources: {}
        ports:
        - containerPort: 80
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database
              key: MYSQL_ROOT_PASSWORD
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database
              key: MYSQL_PASSWORD
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: database
              key: MYSQL_DATABASE
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: database
              key: MYSQL_USER
        - name: MYSQL_HOST
          valueFrom:
            secretKeyRef:
              name: database
              key: MYSQL_HOST
        volumeMounts:
        - name: php-ini
          mountPath: /opt/docker/etc/php/php.ini
          subPath: php.ini
      - image: mysql:5.6
        name: mysql-container
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database
              key: MYSQL_ROOT_PASSWORD
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database
              key: MYSQL_PASSWORD
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: database
              key: MYSQL_DATABASE
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: database
              key: MYSQL_USER
        - name: MYSQL_HOST
          valueFrom:
            secretKeyRef:
              name: database
              key: MYSQL_HOST
        ports:
        - containerPort: 3306
        resources: {}
      volumes:
      - name: php-ini
        configMap:
          name: php-config
status: {}


---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  selector:
    app: lamp-wp
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
---
apiVersion: v1
kind: Service
metadata:
  name: lamp-service
spec:
  type: NodePort
  selector:
    app: lamp-wp
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30008

thor@jump_host ~$ kubectl create -f /tmp/lamp.yaml
configmap/php-config created
deployment.apps/lamp-wp created
service/mysql-service created
service/lamp-service created
thor@jump_host ~$ kubectl get po 
NAME                       READY   STATUS              RESTARTS   AGE
lamp-wp-6d66967b4f-ft7zz   0/2     ContainerCreating   0          12s
thor@jump_host ~$ kubectl get deploy
NAME      READY   UP-TO-DATE   AVAILABLE   AGE
lamp-wp   0/1     1            0           19s
thor@jump_host ~$ kubectl get service
NAME            TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE
kubernetes      ClusterIP   10.96.0.1      <none>        443/TCP        40m
lamp-service    NodePort    10.96.124.27   <none>        80:30008/TCP   29s
mysql-service   ClusterIP   10.96.132.73   <none>        3306/TCP       29s
thor@jump_host ~$ kubectl get po 
NAME                       READY   STATUS    RESTARTS   AGE
lamp-wp-6d66967b4f-ft7zz   2/2     Running   0          34s
thor@jump_host ~$ kubectl get all
NAME                           READY   STATUS    RESTARTS   AGE
pod/lamp-wp-6d66967b4f-ft7zz   2/2     Running   0          75s

NAME                    TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE
service/kubernetes      ClusterIP   10.96.0.1      <none>        443/TCP        41m
service/lamp-service    NodePort    10.96.124.27   <none>        80:30008/TCP   75s
service/mysql-service   ClusterIP   10.96.132.73   <none>        3306/TCP       75s

NAME                      READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/lamp-wp   1/1     1            1           75s

NAME                                 DESIRED   CURRENT   READY   AGE
replicaset.apps/lamp-wp-6d66967b4f   1         1         1       75s
thor@jump_host ~$ sudo vi /tmp/index.php

We trust you have received the usual lecture from the local System
Administrator. It usually boils down to these three things:

    #1) Respect the privacy of others.
    #2) Think before you type.
    #3) With great power comes great responsibility.

[sudo] password for thor: 
Sorry, try again.
[sudo] password for thor: 
thor@jump_host ~$ sudo cat /tmp/index.php
<?php
$dbname = $_ENV["MYSQL_DATABASE"];
$dbuser = $_ENV["MYSQL_USER"];
$dbpass = $_ENV["MYSQL_PASSWORD"];
$dbhost = $_ENV["MYSQL_HOST"];

$connect = mysqli_connect($dbhost, $dbuser, $dbpass) or die("Unable to Connect to '$dbhost'");

$test_query = "SHOW TABLES FROM $dbname";
$result = mysqli_query($test_query);

if ($result->connect_error) {
   die("Connection failed: " . $conn->connect_error);
}
  echo "Connected successfully";

thor@jump_host ~$ kubectl get all
NAME                           READY   STATUS    RESTARTS   AGE
pod/lamp-wp-6d66967b4f-ft7zz   2/2     Running   0          7m26s

NAME                    TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE
service/kubernetes      ClusterIP   10.96.0.1      <none>        443/TCP        47m
service/lamp-service    NodePort    10.96.124.27   <none>        80:30008/TCP   7m26s
service/mysql-service   ClusterIP   10.96.132.73   <none>        3306/TCP       7m26s

NAME                      READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/lamp-wp   1/1     1            1           7m26s

NAME                                 DESIRED   CURRENT   READY   AGE
replicaset.apps/lamp-wp-6d66967b4f   1         1         1       7m26s
thor@jump_host ~$ kubectl get po
NAME                       READY   STATUS    RESTARTS   AGE
lamp-wp-6d66967b4f-ft7zz   2/2     Running   0          8m33s
thor@jump_host ~$ kubctl cp /tmp/index.php lamp-wp-6d66967b4f-ft7zz:/app -c httpd-php-container
bash: kubctl: command not found
thor@jump_host ~$ kubectl cp /tmp/index.php lamp-wp-6d66967b4f-ft7zz:/app -c httpd-php-container
thor@jump_host ~$ kubectl exec -it lamp-wp-6d66967b4f-ft7zz -c httpd-php-container -- cat /app/index.php
<?php
$dbname = $_ENV["MYSQL_DATABASE"];
$dbuser = $_ENV["MYSQL_USER"];
$dbpass = $_ENV["MYSQL_PASSWORD"];
$dbhost = $_ENV["MYSQL_HOST"];

$connect = mysqli_connect($dbhost, $dbuser, $dbpass) or die("Unable to Connect to '$dbhost'");

$test_query = "SHOW TABLES FROM $dbname";
$result = mysqli_query($test_query);

if ($result->connect_error) {
   die("Connection failed: " . $conn->connect_error);
}
  echo "Connected successfully";

thor@jump_host ~$


